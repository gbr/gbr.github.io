<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>glenn ryan</title>
    <link>http://glennryan.info/</link>
    <description>Recent content on glenn ryan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Glenn Ryan 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 28 Feb 2016 01:44:08 -0800</lastBuildDate>
    <atom:link href="http://glennryan.info/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>read time</title>
      <link>http://glennryan.info/2016/02/28/read-time</link>
      <pubDate>Sun, 28 Feb 2016 01:44:08 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/28/read-time</guid>
      <description>&lt;p&gt;I just added a reading time feature to the site, where now, under the article title, there is a guesstimate of how long it will take to read the article, assuming you read 200 WPM on average.&lt;/p&gt;

&lt;p&gt;I ran into &lt;a href=&#34;http://juristr.com/blog/2013/07/how-to-setup-reading-time-indicator-ten-minutes/&#34;&gt;this article&lt;/a&gt; explaining how to do it in short time. Following the directions, I downloaded the &lt;a href=&#34;https://raw.github.com/RadLikeWhoa/Countable/master/Countable.js&#34;&gt;Countable script&lt;/a&gt; and placed it into my static JS folder. Rather than write the chunk of code Juri suggests in a separate file or in an embedded script tag, I put it into Countable itself, in its own function called renderReadTime. And then I added function params to make it a little more clean:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;...
    enabled: function (element) {
      var isEnabled = false

      if (element &amp;amp;&amp;amp; element.nodeType === 1) {
        _loop(_liveElements, function (live) {
          if (live.element === element) isEnabled = true
        })
      }

      return isEnabled
    },

    renderReadTime: function (wpm, fromElement, toElement) {
      this.once($(fromElement)[0], function (counter) {
        var estimatedRaw = counter.words / wpm,
        minutes = Math.round(estimatedRaw);
        var effectiveTime = (minutes &amp;lt; 1) ? &amp;quot;a few secs&amp;quot; : minutes + &amp;quot; min read&amp;quot;;
          $(toElement).html(effectiveTime);
      });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, it&amp;rsquo;s still not &lt;em&gt;that&lt;/em&gt; clean when I actually call it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ &amp;quot;&amp;lt;!-- Reading time approximation --&amp;gt;&amp;quot; | safeHTML }}
&amp;lt;script src=&amp;quot;{{ .Site.BaseURL }}js/Countable.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;Countable.renderReadTime(200, &#39;div[itemprop=articleBody]&#39;, &#39;.reading-time&#39;);&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll admit that my greatest weakness with front-end web development is HTML/CSS, so I&amp;rsquo;m sure I&amp;rsquo;ve made some cardinal sins here with my example code. I&amp;rsquo;ve got to do some reading up on that. But hey, that&amp;rsquo;s what this blog is for.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>starting dart</title>
      <link>http://glennryan.info/2016/02/27/starting-dart</link>
      <pubDate>Sat, 27 Feb 2016 22:31:15 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/27/starting-dart</guid>
      <description>

&lt;h3 id=&#34;what-i-wanted:f67c76d5effc368f32a31f09e6236041&#34;&gt;what i wanted&lt;/h3&gt;

&lt;p&gt;I have a side project under wraps that I intend to work on over the next couple of months. I&amp;rsquo;m doing it for several reasons. Not only do I think the idea behind the project has potential, but I have some take-aways I hope to work towards. As a junior-level engineer, I want to have more hands-on experience with design. And, above all, as an embedded C developer, I want to modernize my toolbox and become more well-rounded as a result. I have had prior employment in the web development space, if only briefly, so I thought writing an app for the web would be great way to build off prior experience yet venture into the new.&lt;/p&gt;

&lt;p&gt;On and off since December, I&amp;rsquo;ve considered plenty of modern languages and frameworks out there to find at least one set of tools most conducive to prototyping this app &lt;em&gt;quickly&lt;/em&gt;, &lt;em&gt;efficiently&lt;/em&gt; and in a way that is &lt;em&gt;maintainable&lt;/em&gt; and &lt;em&gt;readable&lt;/em&gt; for a single full-stack developer. It would also help, I thought, if I enjoyed the langauges/frameworks I learn along the way. As someone who has only written production code for the web in Java (using JSF and Primefaces), I want this experience to be a little more modern. I want it to involve &lt;em&gt;open source&lt;/em&gt; tools.&lt;/p&gt;

&lt;h3 id=&#34;how-i-found-it:f67c76d5effc368f32a31f09e6236041&#34;&gt;how i found it&lt;/h3&gt;

&lt;p&gt;When I expressed these desires and constraints to my friend, he referred me to this video:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/pB0WvcxTbCA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;The presenter delivers a very thorough, though impartial, overview of fundamentals to nail down and quite clearly delineates two different paths for a web developer: front end and back end. He does not say that one person cannot excel at both, but he certainly implies one should mastering one fork of the road before approaching the other. Yet he rarely expresses an opinion other than what he thinks the job market favors in terms of volume of available jobs. This was a good start, but I needed a nudge in a direction.&lt;/p&gt;

&lt;p&gt;Fortunately, we can always rely on the YouTube community to express a clear opinion, right or wrong.&lt;/p&gt;

&lt;p&gt;I noticed, several comments down from the top, mention of a MEAN stack and a few comments below it praising said mention. This looked promising. I researched what this MEAN stack was and how it was being used. Some of the top results in my Google search revealed stunning single-page, JavaScript web apps written by a lone developer. Some of these people were generous enough to leave their repos public for others to study their code. I was instantly sold.&lt;/p&gt;

&lt;h3 id=&#34;how-i-got-turned-around:f67c76d5effc368f32a31f09e6236041&#34;&gt;how i got turned around&lt;/h3&gt;

&lt;p&gt;I spent some time getting to know JavaScript and revisiting web dev fundamentals, meanwhile gathering tutorials and resources to really get started with this MEAN thing. Thanks to these venerable blog-writers, I gathered quite a bit of base material and knowledge to work with. Unfortunately, it all dematerialized once I took a step back and considered all my options once more before going &amp;ldquo;all in&amp;rdquo;, so to speak, with MEAN. I researched the negative, the neutral and the positive, ultimately becoming disenchanted with the &amp;ldquo;magic&amp;rdquo; of this combination.&lt;/p&gt;

&lt;p&gt;It all started with Angular. it became clear that though Angular 1.x is a decent-enough framework that is now very mature, it is anticipated to be usurped quite strongly by its successor Angular 2 (now in beta). Likewise, many praised, at the expense of Angular 1.x, the modular and flexible combination of React with Flux architecture. And, finally, many encouraged people to stray away from the MEAN stack in favor of something like Meteor.js.&lt;/p&gt;

&lt;p&gt;I reconsidered those options but found that they were all unsuitable for my app, being either too flexible or too narrow in design. So I decided to upgrade to Angular 2. I lost use of some directives I originally intended to use for my app, but this was fine; &lt;a href=&#34;http://angular-tips.com/blog/2015/09/migrating-directives-to-angular-2/&#34;&gt;it&amp;rsquo;s not terrible to convert them&lt;/a&gt;. I just needed to learn the ins and outs of the new framework. And from there I fell down another rabbit hole. At my disposal in Angular 2 were three language options: JavaScript, TypeScript and Dart.&lt;/p&gt;

&lt;h3 id=&#34;how-i-got-here:f67c76d5effc368f32a31f09e6236041&#34;&gt;how i got here&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Having an open mind is as confusing as it is enriching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I did some research into each option, weighing pros and cons. It seemed clear to me that the benefits lie almost entirely in choosing one or both of the non-JS options, since they were both so much better suited for a larger program than pure JS.&lt;/p&gt;

&lt;p&gt;Then, as I poked around some more, I started to fall for Dart &amp;mdash; I&amp;rsquo;m writing this thing from scratch, I thought, so there&amp;rsquo;s no need for TS&amp;rsquo; main selling point: compatiblity with JS. But I was not sure how realistic this choice would be. In choosing Dart, I posed three dangers to my project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A huge loss in learning materials and examples I could learn from&lt;/li&gt;
&lt;li&gt;The possibility that the language could die in a few years&lt;/li&gt;
&lt;li&gt;Potential incompatibility with key JavaScript libraries this app needs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Concerns one and two are the risks of being an early adopter, but this is cost that yields to a much greater reward: the fun and practice of developing in the unknown, not to mention the oppurtunity to potentially contribute to Angular 2 and Dart (via field-testing) and their communities (via knowledge-sharing). The third problem posed the greatest challenge to the Dart route. Thankfully, the Dart team has &lt;a href=&#34;https://www.dartlang.org/articles/js-dart-interop/&#34;&gt;released some interoperability libraries&lt;/a&gt; to help with this very thing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“When my information changes, I alter my conclusions. What do you do, sir?”
&amp;mdash; John Maynard Keyes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, I thought, if I&amp;rsquo;m going this far, why not go further? &lt;a href=&#34;http://stackoverflow.com/questions/29218468/does-angular-2-0-alpha-work-with-the-components-in-angular-material-project&#34;&gt;I&amp;rsquo;ve lost use of Angular Materials at this stage of Angular 2&lt;/a&gt;, so why not try Polymer too? &lt;a href=&#34;https://dart.academy/dart-angular-2-and-polymer-together/&#34;&gt;It&amp;rsquo;s compatible with Dart and Angular 2&lt;/a&gt;. And why write the Node.js/Express backend in JS or TS if Dart with &lt;a href=&#34;https://pub.dartlang.org/packages/shelf&#34;&gt;shelf&lt;/a&gt; can also do the job, thanks to JS interoperability? I&amp;rsquo;d rather keep the focus of using one language throughout the entirety of the app. If it&amp;rsquo;s possible, why not try it? If it&amp;rsquo;s just a prototype with no constraints, what else do I have to lose than the time I am willing to spend on it?&lt;/p&gt;

&lt;p&gt;So here I am, &lt;a href=&#34;https://www.dartlang.org/codelabs/darrrt/&#34;&gt;getting started with Dart&lt;/a&gt;. I&amp;rsquo;ll come back in a later post and let you know how it went.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a clean slate: deleting all tweets with python</title>
      <link>http://glennryan.info/2016/02/27/a-clean-slate-deleting-all-tweets-with-python</link>
      <pubDate>Sat, 27 Feb 2016 14:08:44 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/27/a-clean-slate-deleting-all-tweets-with-python</guid>
      <description>&lt;p&gt;As my first order of business, I was looking to to delete all prior tweets from my account, since I plan to start using Twitter in a more professional capacity from now on. To do so, I see there are &lt;a href=&#34;tweetdelete.net&#34;&gt;various sites&lt;/a&gt; and &lt;a href=&#34;https://www.gocardigan.com/&#34;&gt;services&lt;/a&gt; out there to assist with that. But part of beginning this blog was a commitment to exploring how I can use official  APIs, third-party libraries or my own code from scratch to accomplish things on the web.&lt;/p&gt;

&lt;p&gt;So I found this nice Python script, courtesy of &lt;a href=&#34;https://github.com/davej&#34;&gt;Dave Jeffery&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/davej/113241.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I registered my twitter application under bird_eater (ha, get it? because it&amp;rsquo;s Python getting rid of tweets&amp;hellip; eh) and put in my key and secret. I then followed the directions from the script&amp;rsquo;s output et voilà! I am now tweet-free. I can restart my Twitter profile with a clean slate &amp;mdash; notwithstanding the other parts of my account.&lt;/p&gt;

&lt;p&gt;In fact, why not take care of those things, too? To take this further, I should expand on this script to make it a bit more sophisticated. Some ideas could be deleting certain tweets, unfollowing accounts, removing likes and lists, etc. That could be a promising project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>