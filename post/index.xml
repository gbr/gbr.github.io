<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on glenn ryan&#39;s blog</title>
    <link>http://glennryan.info/post/</link>
    <description>Recent content in Posts on glenn ryan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Glenn Ryan 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 04 Sep 2016 15:35:51 -0700</lastBuildDate>
    <atom:link href="http://glennryan.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>function vs form</title>
      <link>http://glennryan.info/2016/09/04/function-vs-form</link>
      <pubDate>Sun, 04 Sep 2016 15:35:51 -0700</pubDate>
      
      <guid>http://glennryan.info/2016/09/04/function-vs-form</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been doing some research to look into visual and graphic design, interested in seeing what makes a good designer. There are quite a few websites devoted to helping budding UX designers find their footing, particularly those coming from an engineering background. One in particular I&amp;rsquo;ve been enjoying is &lt;a href=&#34;https://hackdesign.org/&#34; target=&#34;_blank&#34;&gt;Hack Design&lt;/a&gt;. The weekly lessons are so good I&amp;rsquo;m half expecting to find a bill in my inbox one of these days. It&amp;rsquo;s pretty unbelievable that it&amp;rsquo;s free.&lt;/p&gt;

&lt;p&gt;What captured my attention this week is the topic of typography. I was already familiar with the concept of serif vs sans-serif, monospace vs proportional. I may not have known the names for the measurement points for lettering, but I knew there were varying peaks and valleys for different characters. There is obviously more to learn, but the basic concepts are intuitive enough. However, what I didn&amp;rsquo;t realize on my own was just how much typeface influenced my interaction with the printed word. Clearly, we choose one font over another. But I don&amp;rsquo;t think most of us realize at times the true relationship between form and content, lettering and letters.&lt;/p&gt;

&lt;h3 id=&#34;helvetica-you-were-here-the-whole-time&#34;&gt;helvetica, you were here the whole time&lt;/h3&gt;

&lt;p&gt;At the end of the list of links and book recommendations this week was a film. It was &lt;a href=&#34;http://www.hustwit.com/category/helvetica/&#34; target=&#34;_blank&#34;&gt;Helvetica&lt;/a&gt;, which I had heard of but never took much interest in seeing. I don&amp;rsquo;t have Netflix, so I spent $0.99 for an SD rental on Amazon to see it. Not too much investment. The documentary is structured in what turns out to be a three-act narrative on the ubiquitous Helvetica font in the modern world. Along the way we first see it from a fully modernist perspective (Part I), through the eyes of the generation directly succeeding its birth. Next, we see the post-modern, grunge generation that derided and sought to overcome it (Part II). And we finally see the most recent generation that has, for better or worse, re-embraced Helvetica and sought to re-vitalize it within the context of post-modernism (Part III).&lt;/p&gt;

&lt;p&gt;I have not chosen whether to be in Team Helvetica or not, but it&amp;rsquo;s clear that Helvetica serves not just as our reference point for how a font can change the world but as an extreme in the question of whether design should serve only as a utility for delivering content or whether design should be content in itself. It&amp;rsquo;s funny. In Part I, Helvetica was noted for its strengths in the former. Yet, in Part III, for its ability to carry so many tones and subtexts, even contradictary ones. One commentor in the film notes its cheekiness in American Apparel, yet its clean, conforming feel in the lettering of GAP and Banana Republic. So even the poster child for clarity and neutrality crosses the line into becoming a form of content, carrying a message whether in irony or earnestness.&lt;/p&gt;

&lt;h3 id=&#34;for-us-or-against-us&#34;&gt;for us or against us&lt;/h3&gt;

&lt;p&gt;This got me thinking about design in general. Not that I have ever studied formal design theory, but I am curious from a layman&amp;rsquo;s perspective about the role design currently plays, should play and should never play. Should design be expressive? To what extent? If a design challenges its audience, is it bad design? Is design art?&lt;/p&gt;

&lt;p&gt;I was reading a wonderful article by Irene Au on &lt;a href=&#34;https://medium.com/design-your-life/design-and-the-self-a5670a000fee#.6z0vy2ge8&#34; target=&#34;_blank&#34;&gt;Design and the Self&lt;/a&gt;. It takes a clear stance in the camp of design being function, identity and intent, not art, nor an expression of anything more than a product. Clarity and simplicity triumph over all else. If not, it is a sign of &amp;ldquo;affliction of the Self&amp;rdquo;&amp;mdash;something like fear, greed or attachment corrupting the purity of true intention (see her article for details on what she means by that). There&amp;rsquo;s a bit of spirtuality in the argument that &amp;ldquo;the more able we are to transcend our beliefs about our Self, the better we can create a great design that clearly expresses our intention&amp;rdquo;, which she punctuates by saying, &amp;ldquo;What we create reflects our inner state&amp;rdquo;. And then, conversely, what we consume and use changes our inner state. Being and acting in association with a well-designed product with positive values and intentions nurtures our potential to embody the best version of ourselves. A product that moves in contradiction to our intentions only carries friction and adverisity to its user.&lt;/p&gt;

&lt;p&gt;And if that were not enough, in the comments, a prominent UX Designer named Austin Knight commends the essay but counters that the examples provided put celebrity designers on display, like Coco Chanel and Dieter Rams, who are not the humble product designers Irene claims them to be. &amp;ldquo;&lt;em&gt;They are the brand&lt;/em&gt; that they represent&amp;rdquo;, he says. He lists some of his own articles at the end with very direct titles: &lt;a href=&#34;https://austinknight.com/writing/design-is-not-art/&#34; target=&#34;_blank&#34;&gt;Design is not Art&lt;/a&gt;, &lt;a href=&#34;https://austinknight.com/writing/good-design-is-humble/&#34; target=&#34;_blank&#34;&gt;Good Design is Humble&lt;/a&gt;, &lt;a href=&#34;https://blogs.adobe.com/creativecloud/the-art-of-lean-ux-and-the-death-of-ego-with-austin-knight/&#34; target=&#34;_blank&#34;&gt;Lean UX and the Death of Ego with Austin Knight&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m typically such a yes-man when it comes to the question of the &amp;ldquo;is X art&amp;rdquo; question. But I agree with him here. A good designer is invisible to the beholder, while a good artist gets to choose how visible they want to be. That&amp;rsquo;s what expression means in this context.&lt;/p&gt;

&lt;p&gt;In any case, I don&amp;rsquo;t think I &amp;ldquo;solved&amp;rdquo; this issue, but this seems as good as any place to stop. I look forward to learning more about visual design. I&amp;rsquo;d love to make an amateur attempt at designing my own font one day as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>laying a foundation</title>
      <link>http://glennryan.info/2016/04/17/laying-a-foundation</link>
      <pubDate>Sun, 17 Apr 2016 12:49:12 -0700</pubDate>
      
      <guid>http://glennryan.info/2016/04/17/laying-a-foundation</guid>
      <description>

&lt;p&gt;I have a bevy of subjects to explore, but I didn&amp;rsquo;t have much time to prepare material over the past couple of weeks. My productivity with developing and reasoning about my app really took off, so I&amp;rsquo;ve been focusing my energy on that. Therefore, I decided to dedicate this post to a few lessons I learned that I hope to carry forward in future projects. The below assumes this is an open source app that is nontrivial but in a rich domain (like web or mobile development).&lt;/p&gt;

&lt;h3 id=&#34;it-was-here-already-long-ago&#34;&gt;it was here already, long ago&lt;/h3&gt;

&lt;p&gt;You need to spend quite a bit of time reasoning about your app before a single line of code is written. I&amp;rsquo;d recommend starting by scouting for &amp;ldquo;Prior Art&amp;rdquo;. Take advantage of the easy access we have to open source projects today. Hunt down apps that do something similar to yours, try to understand what problems they were trying to solve and dig deep into their code to see how they aimed to acheive it. Be empathetic but critical. You want to grasp with their intent to understand the whys and hows of their code but also see how things could have been done better differently, in your opinion of course.&lt;/p&gt;

&lt;p&gt;After some research, you will have hopefully gained quite a bit of perspective. As a side effect, if you were hoping to make the first or &amp;ldquo;best&amp;rdquo; of a solution domain, you know what you&amp;rsquo;re up against.&lt;/p&gt;

&lt;h3 id=&#34;all-streams-flow-into-the-sea-yet-the-sea-is-never-full&#34;&gt;all streams flow into the sea, yet the sea is never full&lt;/h3&gt;

&lt;p&gt;Next, I would recommend researching the technology stack you want to use for your app. This can be a paralyzing act for some, given how some domains (front-end web dev, par excellence) have so much to choose from. But feeling good about your choices here can go a long way in staying confident in the long run. Depending on how this project scales from personal to library, make some wise choices on how brave you want to be in choosing the cuting-edge.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don&amp;rsquo;t&lt;/em&gt; believe the hype for anything. &lt;em&gt;Do&lt;/em&gt; spend some time on tutorials and really think about how the tech you choose will behave when brought into the wild unknown of your future app.&lt;/p&gt;

&lt;h3 id=&#34;the-eye-never-has-enough-of-seeing-nor-the-ear-its-fill-of-hearing&#34;&gt;the eye never has enough of seeing, nor the ear its fill of hearing&lt;/h3&gt;

&lt;p&gt;That being said, don&amp;rsquo;t spend too much time researching technology. This was a big mistake for me in my first nontrivial project, having swapped out languages and frameworks ad infinitum. Generally if you make enough &amp;ldquo;macro&amp;rdquo; design decisions up front (e.g., going modular vs holistic, as I discussed in my last post), you can trust that you&amp;rsquo;ll probably make a pretty good initial decision.&lt;/p&gt;

&lt;h3 id=&#34;what-is-crooked-cannot-be-straightened&#34;&gt;what is crooked cannot be straightened&lt;/h3&gt;

&lt;p&gt;Now you&amp;rsquo;re ready to start writing code? Well, don&amp;rsquo;t. List out design patterns, write pseudocode, model your data and drum up some state machines,&amp;mdash;as necessary, of course&amp;mdash;doing the best you can. Some of these things are inherent to the technology stack you earlier decided on, while others are things you find appropriate for your unique solution.&lt;/p&gt;

&lt;p&gt;The key thing here is that your initial, unverified ideas about what your app will actually do are probably wrong because there are always hidden complexities, corner cases and logical errors that you will brush up against if you continue with it as-is. Doing the right amount of planning and design keeps your development on the straight and narrow. You want to avoid a shaky, sporadic design full of ugly hacks and corner case checking. You especially want to avoid ugliness that is not worth the refactoring required to fix it. That&amp;rsquo;s to say either it&amp;rsquo;s pointlessly trivial (and you should have thought of it), or it&amp;rsquo;s so pervasive that it&amp;rsquo;s nontrivial to get rid of.&lt;/p&gt;

&lt;h3 id=&#34;what-is-lacking-cannot-be-counted&#34;&gt;what is lacking cannot be counted&lt;/h3&gt;

&lt;p&gt;As stated before vis-a-vis prior planning, everything is a balance. Don&amp;rsquo;t overdo planning or design. There &lt;em&gt;is&lt;/em&gt; such a thing as overengineering. Believe me, it&amp;rsquo;s just as much of a pain in the long run as an ugly, undercooked design.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;will&lt;/em&gt; have bugs; there will always be problems you couldn&amp;rsquo;t foresee in the planning phase. That is the reality of writing anything with state. Your design can&amp;rsquo;t be proven. And so implementation will always deviate from design.&lt;/p&gt;

&lt;p&gt;It bears repeating: &lt;em&gt;everything is a balance&lt;/em&gt;. I hope to explore the nuances of this balance more and more as I gain more experience.&lt;/p&gt;

&lt;h3 id=&#34;better-one-handful-with-tranquility-than-two-handfuls-with-toil&#34;&gt;better one handful with tranquility than two handfuls with toil&lt;/h3&gt;

&lt;p&gt;Now that you&amp;rsquo;re ready to start with your code, remember to indulge in TDD. Break your code into units and express that bare logic in unit tests. Take your time, write out as much as you feel appropriate. Given good research and design, this part almost writes itself.&lt;/p&gt;

&lt;p&gt;Finally, my last piece of faux-wisdom: after all of the above skeleton work is done, you&amp;rsquo;ve thrown in the meat of your app, and you have a &lt;a href=&#34;https://medium.com/the-happy-startup-school/beyond-mvp-10-steps-to-make-your-product-minimum-loveable-51800164ae0c&#34; target=&#34;_blank&#34;&gt;Minimum Loveable Product&lt;/a&gt;, consider it a prototype. This is the golden time when you can decide here whether to continue with what you have, interchange some parts, or throw it out and start over.&lt;/p&gt;

&lt;p&gt;Designing and planning is like the Ring of Power, and we&amp;rsquo;re all the Frodos of the problem we&amp;rsquo;re facing. Rather than cowardly wear the ring and hide in the addicting shadow world of inaction and strategy, or foolishly rush in without it, we can use the ring as we need to in our journey to ultimately destroy it, and live peacefully in the world of implementation. The hard part is keeping our wits about us and learning when to slip it on and off.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>modular vs holistic</title>
      <link>http://glennryan.info/2016/04/03/modular-vs-holistic</link>
      <pubDate>Sun, 03 Apr 2016 11:48:54 -0700</pubDate>
      
      <guid>http://glennryan.info/2016/04/03/modular-vs-holistic</guid>
      <description>

&lt;h3 id=&#34;to-every-thing-there-is-a-season&#34;&gt;to every thing there is a season&lt;/h3&gt;

&lt;p&gt;Last time, I channeled my frustration with the Java-like nature of Dart, and then spent some time digressing on the benefits of light, modular approaches to system design. I ended on an admiration for this tendency in the Go language and in Facebook&amp;rsquo;s React. I even (offline) gave up on striving for full-stack JavaScript in my app, deciding to try Go for the server, in lieu of Node.js. But that&amp;rsquo;s an entire blog post of its own.&lt;/p&gt;

&lt;p&gt;This got me thinking. Surely, there is a time and a place for a modular approach, and the same for a more holistic one. Let&amp;rsquo;s walk through some case studies from a bird&amp;rsquo;s eye view. Please note, what to follow isn&amp;rsquo;t a compare and contrast &lt;em&gt;per se&lt;/em&gt;, as I myself have only tutorial-sized experience with many of these technologies, at most. To focus more on design than implementation, let&amp;rsquo;s assume each of these frameworks do a bang-up job at  what they set out to do. With that out of the way, I want to discuss their design philosophies and what exactly each example has set out to solve.&lt;/p&gt;

&lt;h3 id=&#34;angular-ember-and-react&#34;&gt;angular &amp;amp; ember&amp;hellip; and react&lt;/h3&gt;

&lt;p&gt;Angular and Ember are two JavaScript-based MVC frameworks that both went through rather massive changes in their 2.X versions, many of these radical transformations originating from React&amp;rsquo;s DNA. Angular, in particular, began to incorporate a more mindful state management pattern into its internals, as well as external support for Functional Reactive Programming in the form of RxJS and Immutable.js. Angular dropped the scope and directive model for web components, which really lends itself toward a much easier time managing the state of your app. It&amp;rsquo;s been pretty fun to follow &lt;a href=&#34;http://victorsavkin.com/post/137821436516/managing-state-in-angular-2-applications&#34; target=&#34;_blank&#34;&gt;Victor Savkin&amp;rsquo;s blog&lt;/a&gt; to see how well Angular incorporates with the Observer pattern via Streams and Properties. It&amp;rsquo;s also interesting to watch the debates unfold on the merits of the Flux model (Mediator pattern) vs this FRP Observer pattern.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know much about Ember, I&amp;rsquo;m afraid, but I have read that Ember 2.X borrowed from the React ecosystem in a way similar to Angular. Ember has been responsible for bringing much of the Ruby on Rails world into the JavaScript SPA front-end ecosystem. From what I&amp;rsquo;ve read, the link between Ruby and Ember is the &amp;ldquo;convention over configuration&amp;rdquo; mindset.&lt;/p&gt;

&lt;p&gt;The interesting thing here is despite having changed to update their toolset and state model, their underlying philosophies haven&amp;rsquo;t budged one inch. They&amp;rsquo;re still the M, the V and the C. React is just the V. They&amp;rsquo;ve looked at the entire React ecosystem (a Flux implementation, react-router, etc.) as one big monolith and competed with &lt;em&gt;that&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s lump Ember and Angular together as the monoliths (as I already sort of have) and compare them to React and its ecosystem. Why would you pick one over the other?&lt;/p&gt;

&lt;p&gt;Assuming we&amp;rsquo;re talking about a &lt;a href=&#34;http://en.wikipedia.org/wiki/Greenfield_project&#34; target=&#34;_blank&#34;&gt;greenfield&lt;/a&gt; app (for a &lt;a href=&#34;http://en.wikipedia.org/wiki/Brownfield_%28software_development%29&#34; target=&#34;_blank&#34;&gt;brownfield&lt;/a&gt; app, React is a no-brainer, since it can be sprinkled in with little concern for the existing infrastructure), monoliths (which I will also alias as &lt;em&gt;the holistic method&lt;/em&gt;) bring huge guarantees to the table when it comes to productivity.&lt;/p&gt;

&lt;p&gt;For starters, they&amp;rsquo;re often opinionated, leaving less room for users to do something stupid. But this has further implications. For management, this can mean hiring someone with something like Angular on their resume theoretically guarantees they could join an Angular project and be quickly brought to speed on team conventions. For consultants, this is true to such an extreme that the developing team can be swapped out for a maintenance team with little handoff, and things probably won&amp;rsquo;t break (this is also why little old Java is still King of the Consulting Industry, what with its strong culture and powerful IDEs). For developers, though, gaining proficiency with an opinionated framework more so means specializing yourself with that framework than with, in this case, JavaScript UI, since it abstracts much of the underlying domain away from you.&lt;/p&gt;

&lt;p&gt;Worse than that, inflexibility can really suck for people who outgrow what the framework wants you to do and who know what they&amp;rsquo;re doing. The magic of MV*C comes at a cost.&lt;/p&gt;

&lt;p&gt;Obviously, the biggest gain with monoliths is that they can provide you a lot out of the box, some more than others. MVCs themselves can scale down &amp;mdash; we see in Backbone a very simple, barebones set of building blocks that often become the platform for another mini-&amp;ldquo;framework&amp;rdquo; created by the user. How, then, do we make the choice to pursue something on the React side of the spectrum?&lt;/p&gt;

&lt;p&gt;Well, depending on how far you go, you can really start to have the benefits of being framework-free &amp;mdash; ultimate flexibility &amp;mdash;, without its cost: having to reinvent the wheel. With something like React, you can pick and choose what you want, swap out some parts for others, and scale your dependencies for what your app minimally requires. Sometimes you don&amp;rsquo;t need an M or a C. Sometimes your models are just JS objects that you pass as JSON to your server. Sometimes there isn&amp;rsquo;t much state to manage. As Francois Ward says when giving his &lt;a href=&#34;https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.6n9su1v5s&#34; target=&#34;_blank&#34;&gt;recommendations&lt;/a&gt; for building a React app in 2016,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is your application only 2–3 screens? Then you don’t need a router. Are you making a single page? Then you don’t even need Redux, just use React’s own state. Are you making a simple CRUD application? You don’t need Relay. [&amp;hellip;] Are you starting with Redux? You don’t need Redux-Form or Redux-Sagas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This has some implications. As you develop your app, if the problem or the solution isn&amp;rsquo;t so well defined (and you&amp;rsquo;re using some form of Agile), you can add and remove these elements as you see fit. Also, we know by now the JavaScript world moves so fast.. and often breaks things. If something is obsolete or no longer works, you can switch it for something else. As React proponents love to point out, this is almost like the Unix philosophy of doing only one thing and doing it really well.&lt;/p&gt;

&lt;p&gt;With a tool (a &lt;em&gt;library&lt;/em&gt;, really) comes a good amount of convention, yet nothing to constrain us too much.&lt;/p&gt;

&lt;p&gt;But now we have our issue. Independent libraries don&amp;rsquo;t always play well together. Sometimes you can shoehorn a solution, but it goes without saying that can have grave consequences. It seems most of the successful libraries used with React have undergone a good amount of grooming by the React team themselves (who may not always be able to be so generous with their time). And when we have libraries that are almost guaranteed to work well together (like everything in React&amp;rsquo;s GitHub repo), we risk becoming co-dependent and constraining ourselves to such an ecosystem, now being no different than our buddies on the MVC side. Furthermore, we risk developing an Achilles heel. See how Redux has now become the center of a large set of other tools? What if an alternative called Nosux comes along that trumps it times a million (and isn&amp;rsquo;t a 1:1 replacement)? Then it, too, trumps all of Redux&amp;rsquo;s dependents. And we all know how the JS world loves to quickly jump to the shiniest toy available.&lt;/p&gt;

&lt;p&gt;If none of those things are an issue, we get down to the questions you need to ask yourself when choosing between holistic and modular approaches: &lt;em&gt;how much decision fatigue are you willing to endure&lt;/em&gt;, and &lt;em&gt;how much of the heavy lifting do you want to be responsible for&lt;/em&gt;?&lt;/p&gt;

&lt;h3 id=&#34;oh-the-places-you-ll-go&#34;&gt;oh, the places you&amp;rsquo;ll go&lt;/h3&gt;

&lt;p&gt;This kind of reasoning is more analogous to other domains of programming and even hardware than you might think. Like I said in my last post, Go&amp;rsquo;s web ecosystem is very much in line with React&amp;rsquo;s. The popular way to approach writing a web backend in Go is to start with net/http as a base library (the React in this analogy) and build from there. It&amp;rsquo;s common to sprinkle on a router like gorilla/mux. You&amp;rsquo;ll often build the rest, but there are third-party handlers and middleware out there too. These are the Reduxes and Relays of the Go world. See, not so different! Contrast this with the monolithic Ruby on Rails. And notice there is room for middle-ground in other frameworks and ecosystems, like Node.js with Connect, Express, Koa, etc.&lt;/p&gt;

&lt;p&gt;And I will also take the opportunity to out myself as a current employee of Hewlett Packard Enterprises, particularly the newly acquired Aruba Networks. Here at HPE, we&amp;rsquo;ve announced the &lt;a href=&#34;http://www8.hp.com/h20195/v2/GetPDF.aspx/4AA5-8813ENW.pdf&#34; target=&#34;_blank&#34;&gt;HPE Composable Infrastructure&lt;/a&gt;. I deal more with software engineering than network design or server infrastructure myself, so I may be speaking out of school. But, from what I can tell, it seems that HPE&amp;rsquo;s approach here is very similar to this whole modular thing we have with React and Go: here is a solution that is easily adapted to the rapidly changing tech environment of today. Swap out, mix and add components as you see fit, with the help of this core software and your work in creating templates. The &lt;a href=&#34;http://h22168.www2.hpe.com/composable_infra/partner_program/us/en/github-repos.html&#34; target=&#34;_blank&#34;&gt;open API and SDKs&lt;/a&gt; have a similar call to arms for &lt;a href=&#34;http://h22168.www2.hpe.com/composable_infra/partner_program/us/en/index.html&#34; target=&#34;_blank&#34;&gt;partnering projects&lt;/a&gt; to develop their own tools based on the foundational design. I like how the diagram in the white paper shows a balance between &amp;ldquo;Traditional Business&amp;rdquo; and &amp;ldquo;The Idea Economy&amp;rdquo;, two seemingly incompatible forces.&lt;/p&gt;

&lt;h3 id=&#34;react-please&#34;&gt;react, please?&lt;/h3&gt;

&lt;p&gt;Bringing it back to React and web technologies, if I said something inaccurate, please be sure to let me know in the comments. I&amp;rsquo;m not an expert; I just wrote this in the hopes of helping a beginner in my position to decide what they need and to educate themselves on what all the hooplah is about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dart streams</title>
      <link>http://glennryan.info/2016/03/14/dart-streams</link>
      <pubDate>Mon, 14 Mar 2016 22:48:00 -0700</pubDate>
      
      <guid>http://glennryan.info/2016/03/14/dart-streams</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been pretty gungho about Dart for the past month or so. I&amp;rsquo;ve been fascinated by its stark yet conservative contrast with JavaScript, and its capacity as a runtime environment to compete with the likes of Node.js and Golang. It had its fair amount of mentions alongside TypeScript, Flow and Babel as attempts to &amp;ldquo;fix&amp;rdquo; current-standard JavaScript for the past few years. Proponents of Dart speak of it as a language for tomorrow by taking a clean break of JS today. I want to evaluate whether I truly prefer Dart over JS and whether I could see myself realistically using it in lieu of its alternatives. More on that later.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve spent the past few weeks going through the Dart tutorials, guides and docs. Before tackling the &lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;https://www.polymer-project.org/1.0/&#34; target=&#34;_blank&#34;&gt;major&lt;/a&gt; Dart client-side frameworks, I wanted to test-drive and understand the bare language itself a little better. It comes with batteries included for the most part, with strong http and async libraries. To really dig in with the latter, I decided to port Andre Staltz&amp;rsquo;s &lt;a href=&#34;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#the-introduction-to-reactive-programming-youve-been-missing&#34; target=&#34;_blank&#34;&gt;RxJS demo&lt;/a&gt; to Dart. And rather than entirely rely on the (unofficial) &lt;a href=&#34;https://pub.dartlang.org/packages/rxdart&#34; target=&#34;_blank&#34;&gt;rxdart package&lt;/a&gt;, I wanted to see how far Dart&amp;rsquo;s native Stream API could take me before things got awkward.&lt;/p&gt;

&lt;h3 id=&#34;new-stream-consciousness&#34;&gt;new Stream&lt;Consciousness&gt;()&lt;/h3&gt;

&lt;p&gt;The Stream API and its affiliate interfaces (discussed below) resemble in many ways Java&amp;rsquo;s &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34; target=&#34;_blank&#34;&gt;java.util.stream&lt;/a&gt; package. It is built from and has many interactions with Futures &amp;mdash; the Dart equivalent to JavaScript&amp;rsquo;s Promises. Andre Staltz aptly likens Streams to Futures++ (well, Promises in his case).  In Dart, these are the two building blocks for a powerful (if sometimes cumbersome) implementation of the Observer design patter for asynchronous flow of data.&lt;/p&gt;

&lt;p&gt;Functional reactive programming (and, well, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34; target=&#34;_blank&#34;&gt;Observer pattern&lt;/a&gt;) isn&amp;rsquo;t anything new, but it has really taken off in the JavaScript world lately. I believe this was as a result of Netflix&amp;rsquo;s success with the Rx library in its asynchronous Java backend. Since much of modern JavaScript heavily relies on using asynchronous constructs to avoid callback hell, this adoption of Rx is very understandable, both in a Node.js runtime environment and in the browser. It really takes off in an MVC context, since it shines as a way of managing state across multiple events that interact with each other.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;the code&lt;/h3&gt;

&lt;p&gt;Anyway, let&amp;rsquo;s see some code. I&amp;rsquo;ll show off my functional but very rough draft of the Dart port. The DartPad app is below. I apologize for the narrow window. I recommend &lt;a href=&#34;https://dartpad.dartlang.org/339f21ae3e12f75ef27e&#34; target=&#34;_blank&#34;&gt;opening the app in DartPad&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/339f21ae3e12f75ef27e&#34; target=&#34;_blank&#34;&gt;reading the code in its gist&lt;/a&gt; for a wider view.&lt;/p&gt;

&lt;iframe src=&#39;https://dartpad.dartlang.org/embed-html.html?id=339f21ae3e12f75ef27e&amp;run=true&amp;verticalRatio=70&#39; style=&#39;height:450px;width:100%;&#39; frameborder=&#39;0&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;As you can see, it&amp;rsquo;s not quite as terse as its RxJS equivalent, but, like I said, this was my attempt to get to know the native Stream API, not explore a full &lt;em&gt;library&lt;/em&gt; like RxJS. If you understand what the original JavaScript from Andrew Schultz is doing, my Dart code should be mostly self-explanatory, save for the implementations of equivalents for RxJs&amp;rsquo; merge and combineLatest at the end.&lt;/p&gt;

&lt;p&gt;First, the good:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In combination with Dart&amp;rsquo;s mostly terse syntax and expressiveness, it&amp;rsquo;s a pretty smooth ride for very basic things&lt;/li&gt;
&lt;li&gt;The triumvirate of the StreamController&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, StreamSubscription&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; and StreamTransformer&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; classes makes for powerful allies in manipulating streams and their flow&lt;/li&gt;
&lt;li&gt;The clear and type-delineated distinction between single-subscription streams and broadcast streams (equivalent to Hot and Cold observables in Rx) makes for less gotchas and relatively easy debugging (assuming you have WebStorm or some other IDE)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the bad:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timing is a little more difficult than I would expect, and I had to slightly depart from the original JS a few times to keep things going in the right order. This is particularly true when it comes to using async/await in callbacks associated with a stream. Not only did I have to improvise a bit, but I had to remove the nullifying stream map altogether, since the timing always came at the wrong place, no matter what I did.&lt;/li&gt;
&lt;li&gt;Doing more than what the basic Stream API (not just the Stream class but all its associated interfaces) provides you with the basic public methods is not just terribly verbose but a one-way trip to class hell. From this angle, I can really see the Java in Dart. It turns out it really is a &lt;a href=&#34;http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&#34; target=&#34;_blank&#34;&gt;Kingdom of the Nouns&lt;/a&gt; despite a very verb-y support for top-level functions. This is why I eventually gave in and shamefully stole my combineLatest from the &lt;a href=&#34;rxdart/test/observable/combine_latest_test.dart&#34; target=&#34;_blank&#34;&gt;rxdart source code&lt;/a&gt;. More on that later.&lt;/li&gt;
&lt;li&gt;I understand Streams are just Future++ and Dart does not currently contain an official FRP library to compare with RxJS, but, given my last point, they could have at least provided methods that resemble startsWith and merge, among some of the other, simpler methods. Having to break out those helper classes should only be for people who write libraries and contribute to the core language. Yet, you really have to if you&amp;rsquo;re going to do anything substantial with the Streams API. Ideally, and in my humble opinion, the average developer should only have to use StreamIterator and StreamView beyond the Stream class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, despite these things, I ultimately completed the app. It&amp;rsquo;s ostensibly the same as the RxJS version, despite some internal differences. And what do I think at the end?&lt;/p&gt;

&lt;h3 id=&#34;my-evaluation&#34;&gt;my evaluation&lt;/h3&gt;

&lt;p&gt;Note: What is to follow are some strong opinions on company-made technologies, none of which have strong feelings attached to them. I have deep respect for both companies, so should employees of either read this, please don&amp;rsquo;t take this personally, but instead hire me! :)&lt;/p&gt;

&lt;p&gt;I think Google did the right thing in not trying to push Dart as the next JavaScript. It really is a retread back to Java culture in many ways, even with its more ambitious departures like optional typing. And I&amp;rsquo;m sure that was intentional (after all, it has some very talented people behind it &amp;mdash; some of whom I&amp;rsquo;m sure agree with the critiques above and to follow) Thing is, that retread to Java world removes so much of the expressive power JS provides.&lt;/p&gt;

&lt;p&gt;The reason why we have this huge JS resurgeance right now is that a single person can prototype an entire library very quickly. Even if we just use the Good Parts of JS, its expressiveness heightens productivity because it is so strong. On the flip side, Dart allows its user to be productive in a different way: it is relatively easy to use and relatively hard to mess up or misunderstand, just like Java. But it loses its prototpying power (possibly also because it does away with prototypes, but that&amp;rsquo;s another article). It has basically become a lighter Java with some JavaScript touches.&lt;/p&gt;

&lt;p&gt;And this is okay! We need more languages like that. I just think that this fundamental difference is why we can&amp;rsquo;t put Dart side-by-side with JS and its other transpilers. It&amp;rsquo;s in its own class. For that reason, though the Dart community encourages individually contributed packages, I don&amp;rsquo;t see Dart sustaining itself from them in the way JS does. Given its relatively low popularity at the moment, what Dart packages need are &lt;em&gt;certified&lt;/em&gt;, &lt;em&gt;authentic&lt;/em&gt;, &lt;em&gt;official&lt;/em&gt; stamping from Google so its users have the assurance of quality and prospects of long-term maintenence. The Polymer and Angular.dart/Angular 2 packages can do that, accompanied by a utility like &lt;a href=&#34;https://github.com/google/quiver-dart&#34; target=&#34;_blank&#34;&gt;quiver&lt;/a&gt; from Google. The problem is that these aren&amp;rsquo;t enough. We would need more. We need tested, production-ready code to be productive now, as Dart itself tries to do by being so conventional and plain.&lt;/p&gt;

&lt;p&gt;These packages I desire would do away with the issues I had during my experience putting together this port. Sure, I can use rxdart, but (no offense to its creator/contributors &amp;ndash; I&amp;rsquo;m sure you are all very talented, smart people) &lt;em&gt;I don&amp;rsquo;t want to&lt;/em&gt;. I gladly use and rely on all sorts of modules in the JS ecosystem because of their wide userbase and engaged contributors. These users adopt and deploy these modules in all types of scenarios, which in turn keeps the contributors honest. I can&amp;rsquo;t say the same of, well, any Dart package, except the ones I know are actively used and maintained at Google.&lt;/p&gt;

&lt;p&gt;I know, I know. You&amp;rsquo;re telling me to contribute to said packages instead of complaining. And I was ready to do that. But then we have two problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doing anything beyond the basic with Dart&amp;rsquo;s core APIs will result in highly verbose, overly classical code. It&amp;rsquo;s a Catch-22. As I said before, this is in direct contrast with the ease of writing a library in JS due to the strong expressive power (despite its gotchas and flaws).&lt;/li&gt;
&lt;li&gt;Assuming I am willing to surmount the former, I don&amp;rsquo;t have the satisfaction of knowing someone else out there will benefit from my work, given Dart&amp;rsquo;s dubious popularity right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And you know? I think some of the early adopters of Dart already realized these things, but their rants are nowhere to be found. They simply moved on without a trace. Case in point, Victor Savkin, one of my heroess, made a few posts about &lt;a href=&#34;http://victorsavkin.com/post/55007674849/functional-reactive-programming-in-dart/&#34; target=&#34;_blank&#34;&gt;FRP in Dart&lt;/a&gt;, but now he talks about TypeScript almost exlusively, and doesn&amp;rsquo;t give a single example in Dart anymore. At one point &lt;a href=&#34;http://victorsavkin.com/post/123555572351/writing-angular-2-in-typescript&#34; target=&#34;_blank&#34;&gt;he extolls TypeScript&lt;/a&gt; over some of its more elegant functional contenders by pointing out it &amp;ldquo;takes 95% of the usefulness of a good statically-typed language and brings it to the JavaScript ecosystem&amp;rdquo;. He lists Dart in an earlier list of contenders but doesn&amp;rsquo;t address it directly, yet here we have our answer.&lt;/p&gt;

&lt;h3 id=&#34;side-rant-you-can-safely-ignore&#34;&gt;side rant (you can safely ignore)&lt;/h3&gt;

&lt;p&gt;From what I&amp;rsquo;ve heard, Google is a relatively conservative company when it comes to language adoption. Facebook stands on the other side of the spectrum, not just by starting out with a language like PHP but in then using Thrift RPC to interface with languages like Erlang (!) and the Node.js runtime. These two companies make a great foil for each other, which is exactly what the web and the JS ecosystem needs.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; But, in this case, I think Dart did not remain true to the domain it was trying to enter because it erred in being too conservative. The front-end and full-stack world is enamored by JS exactly because it is not Java.&lt;/p&gt;

&lt;p&gt;Where I really want Dart to shine is not in the browser or the server but in the phone. Flutter seems like such a great idea to me, and Dart could be Google&amp;rsquo;s Swift. In fact, if it could flat-out replace Java, I would be a happy camper.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;conclusion&lt;/h3&gt;

&lt;p&gt;As I said, I have decided to put down Dart for a bit. For this reason among others, I have also decided to switch my current project from Angular/Polymer to Flux/React. It doesn&amp;rsquo;t need to be isomorphic, but it does require the fine-tuning of state and change detection that the latter provides. I will try out Angular 2 with TypeScript in a different project, hopefully with Go in the server. In the meantime, I&amp;rsquo;ll continue playing around with the JS/Node.js ecosystem, trying to catch up with the advancements of the past year. No hard feelings, right Google? You&amp;rsquo;re still my hero. :)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;After studying this, I can really understand why Angular 2 developers were eager to adopt Rx as away of competing with the strong state management and unidrectional flow provided by a React.js + Flux combination.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;em&gt;StreamController&lt;/em&gt; manages an underlying stream via its public methods add(), addError() and close(). It has a simple state machine which you must learn to work with if you want to use it effectively. It begins with an &lt;em&gt;initial state&lt;/em&gt;, when it has no subscription to a stream. Then, it has a &lt;em&gt;subscribed state&lt;/em&gt; when it attains its first subscription. You may register a callback function with the onListen and onCancel members, which is pretty self-explanatory. It then has &lt;em&gt;cancelled state&lt;/em&gt;. And finally, there&amp;rsquo;s a &lt;em&gt;closed state&lt;/em&gt;, where no more events can be added. There a few more key nuances, but that&amp;rsquo;s the gist of it.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;em&gt;StreamSubscription&lt;/em&gt; is the behind-the-scenes returned object of the listen() method. You can manipulate it further via the onData property. In this app, we only use the listen() method at the end and we don&amp;rsquo;t explicitly use the return value. Nonethless, it provides a flexible way of further modifying actions associated with a Stream as you pass the object through the flow of your code.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;em&gt;StreamTransformer&lt;/em&gt; is a way of creating new streams bound to an originating stream using transformers, a common idiom in the Dart language. I didn&amp;rsquo;t end up using it in this app because the code didn&amp;rsquo;t quite call for it (though the combineLatest implementation almost makes sense in the context of StreamTransformer, if it weren&amp;rsquo;t for the fact that it&amp;rsquo;s supposed to take two Stream objects as arguments, not a Stream and an action).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;For the server side, I think Google has a stronger contender in Go than in a PHP JIT compiler to C++. But for the client, I think Facebook wins with React and Flux over Angular. Interestingly, I think using Go as a backend language has much in design philosophy in common with React and Flux. There is a certainly a shared preference for taking the parts of what is given (industrial-strength components with batteries included) and putting it together to get what you need rather than using a ready-made, full-solution framework. Every time I read about Go server frameworks, there is a vocal majority quipping that this isn&amp;rsquo;t the Go way. I really wish I had the time right now to play with Go some more, but that will have to be another time and another article.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>modularizing javascript</title>
      <link>http://glennryan.info/2016/03/06/modularizing-javascript</link>
      <pubDate>Sun, 06 Mar 2016 17:25:52 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/03/06/modularizing-javascript</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;preface()&lt;/h3&gt;

&lt;p&gt;I originally intended this week&amp;rsquo;s post to discuss design philosophies of front-end web development. Particularly, I wanted to focus on two things: the &lt;em&gt;separation of concerns&lt;/em&gt; of HTML, CSS and JavaScript and &lt;em&gt;imperative vs declarative patterns&lt;/em&gt; for manipulating the DOM tree. I already see that I should have split these up into two posts; they&amp;rsquo;re both pretty meaty topics. While I work on material for those posts, I decided to quickly write up this one to address my (well-founded) anxieties toward potential front-end antipatterns at the end of &lt;a href=&#34;http://glennryan.info/2016/02/28/read-time&#34; target=&#34;_blank&#34;&gt;my last post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;context&#34;&gt;context()&lt;/h3&gt;

&lt;p&gt;I think we can all agree that spaghetti code is bad. Even if you have very modest intentions for something you&amp;rsquo;re writing, it&amp;rsquo;s good to have some organization principles up top and to adapt them as things change. This blog, for example, began with a main JavaScript window.onLoad function and a few script library class here and there at the bottom of the main template. But I am already seeing the JS code expand in ways that do not jive well with this original groundwork. I had to spend some time thinking about how I can foster some modularity and organization as the supporting HTML, CSS and JavaScript code expands. More on that later.&lt;/p&gt;

&lt;p&gt;Sometimes organization is as simple as wrapping your JavaScript code in a &lt;a href=&#34;https://developers.livechatinc.com/blog/always-use-closures-in-your-javascript-app/&#34; target=&#34;_blank&#34;&gt;closure&lt;/a&gt;, then using something like CommonJS or AMD to grab dependencies only as you need them. Sometimes it&amp;rsquo;s sprinkling in a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&#34; target=&#34;_blank&#34;&gt;statement&lt;/a&gt; or &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/lang/Override.html&#34; target=&#34;_blank&#34;&gt;annotation&lt;/a&gt; to make your intentions or practices more clear. In the bigger picture, though, you need to abstract the model and functionality of your code into conceptual pieces, then use design patterns and algorithms to clearly define their behavior and interoperability.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all well and good, but we know time constraints, feature creep and, well, apathy (&lt;em&gt;ahem&lt;/em&gt; laziness) are all real problems.&lt;/p&gt;


&lt;figure &gt;
    &lt;a href=&#34;http://xkcd.com/844/&#34;&gt;
        &lt;img src=&#34;http://imgs.xkcd.com/comics/good_code.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;I don&amp;rsquo;t have a silver bullet to give you to hack away those threats to good code in real production environments. But I will outline below what I&amp;rsquo;ve done to lay down some modular infrastructure for my (tiny) blog to help me with it. Maybe some of it could apply to you.&lt;/p&gt;

&lt;h3 id=&#34;project-structure&#34;&gt;project.structure()&lt;/h3&gt;

&lt;p&gt;So in that &lt;a href=&#34;http://glennryan.info/2016/02/28/read-time&#34; target=&#34;_blank&#34;&gt;last post&lt;/a&gt; I referred to earlier, I felt the suggested way of invoking the &lt;a href=&#34;https://sacha.me/Countable/&#34; target=&#34;_blank&#34;&gt;Countable&lt;/a&gt; library was kind of dirty, so I tried to clean it up by&amp;hellip; something even more dirty. And I knew at the end it was a mess but didn&amp;rsquo;t have the know-how to do anything about it. Still speaking from the place of a novice, I think I have a pretty clean way of doing things now.&lt;/p&gt;

&lt;p&gt;First, &lt;em&gt;don&amp;rsquo;t touch third-party JavaScript code&lt;/em&gt;. Just because isn&amp;rsquo;t presented to you in a special archive file (think .jar) or stored in a special place on your computer doesn&amp;rsquo;t mean you shouldn&amp;rsquo;t treat it as separate. You may need to replace it whole as newer versions of it release, or you may decide one day to invoke the script through a URL rather than a local path. Organization is all about predicting what you can the best that you can, then trying to fool-proof the rest. What I&amp;rsquo;ve done is created a vendor directory to store my third-party scripts, then created a src directory for my code. Now, (a redacted version of) my js directory looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── src
│   ├── main.js
│   └── ...
 └── vendor
    └── Countable.js
    └── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export&#34;&gt;export()&lt;/h3&gt;

&lt;p&gt;Luckily, the Countable library already takes care of exporting itself in a way that complies with whatever module system is used (CommonJS, AMD or global):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typeof&lt;/span&gt; exports &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;) {
    module.exports &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Countable
  } &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typeof&lt;/span&gt; define &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;function&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; define.amd) {
    define(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; Countable })
  } &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    global.Countable &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Countable
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It suffices to follow this pattern for the rest of the modules.&lt;/p&gt;

&lt;h3 id=&#34;require&#34;&gt;require()&lt;/h3&gt;

&lt;p&gt;Next, I took my renderReadTime function out of there (I can&amp;rsquo;t get over how utterly stupid that was) and placed it into a util.js file in my src directory. I modeled the way I modularized it after Countable. And I imported in a way parallel to the way I export (still not sure if this is necessary or even good; please correct me in the comments if not):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typeof&lt;/span&gt; exports &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;) {
    &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;var&lt;/span&gt; Countable &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;../vendor/Countable&amp;#39;&lt;/span&gt;);
  } &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;typeof&lt;/span&gt; define &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;function&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; define.amd) {
    require([&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;../vendor/Countable&amp;#39;&lt;/span&gt;]);
  } &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    Countable &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; global.Countable;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;invoke&#34;&gt;invoke()&lt;/h3&gt;

&lt;p&gt;Finally, I took my HTML invocation of renderReadTime out of the footer of my main template and and put it into the footer of the precise subtemplate it will be used for: article.html. I don&amp;rsquo;t know what I was thinking in placing it elsewhere, to be honest. Now the exact selectors I am using to render the read time output are in the same place as my function call, which makes it all that much easier to read and understand, as well as easier to change in the future.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    
...
                &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;page-title&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;itemprop&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;name headline&amp;quot;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;js-reading-time&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;h5&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;itemprop&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;articleBody&amp;quot;&lt;/span&gt;&amp;gt;
                    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;!-- Content --&amp;gt;&lt;/span&gt;
                &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;div&lt;/span&gt;&amp;gt;
 ...
    
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;!-- Reading time approximation --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;footer&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt;&amp;gt;util.renderReadTime(&lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;div[itemprop=articleBody]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;.js-reading-time&amp;#39;&lt;/span&gt;);&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;footer&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it! I didn&amp;rsquo;t change the functionality of the blog, just organized it better so, as I add third-party files and more code of my own, it will be very easy to see how to divide it up and modularize it.&lt;/p&gt;

&lt;h3 id=&#34;stack-pop&#34;&gt;stack.pop()&lt;/h3&gt;

&lt;p&gt;Now that that&amp;rsquo;s out of the way, I plan to follow this up by discussing separation of concerns of HTML, CSS and JS before getting to declarative and imperative design patterns. The hope is to eventually warm into discussing differences in philosophy between Angular, React and Polymer. In particular, I want to compare them under the lens of whether they give HTML or JS/Dart the biggest piece of the pie when it comes to describing the form and behavior of your content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>read time</title>
      <link>http://glennryan.info/2016/02/28/read-time</link>
      <pubDate>Sun, 28 Feb 2016 01:44:08 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/28/read-time</guid>
      <description>&lt;p&gt;I just added a reading time feature to the site, where now, under the article title, there is a guesstimate of how long it will take to read the article, assuming you read 200 WPM on average.&lt;/p&gt;

&lt;p&gt;I ran into &lt;a href=&#34;http://juristr.com/blog/2013/07/how-to-setup-reading-time-indicator-ten-minutes/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to do it in short time. Following the directions, I downloaded the &lt;a href=&#34;https://raw.github.com/RadLikeWhoa/Countable/master/Countable.js&#34; target=&#34;_blank&#34;&gt;Countable script&lt;/a&gt; and placed it into my static JS folder. Rather than write the chunk of code Juri suggests in a separate file or in an embedded script tag, I put it into Countable itself, in its own function called renderReadTime. And then I added function params to make it a little more clean:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;...
    enabled&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;function&lt;/span&gt; (element) {
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;var&lt;/span&gt; isEnabled &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;false&lt;/span&gt;

      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (element &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; element.nodeType &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
        _loop(_liveElements, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;function&lt;/span&gt; (live) {
          &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (live.element &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; element) isEnabled &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;true&lt;/span&gt;
        })
      }

      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; isEnabled
    },

    renderReadTime&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;function&lt;/span&gt; (wpm, fromElement, toElement) {
      &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;this&lt;/span&gt;.once($(fromElement)[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;function&lt;/span&gt; (counter) {
        &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;var&lt;/span&gt; minutes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;Math&lt;/span&gt;.round(counter.words &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; wpm),
        effectiveTime &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (minutes &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;a few secs&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; minutes &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot; min read&amp;quot;&lt;/span&gt;;
        $(toElement).html(effectiveTime);
      });
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, it&amp;rsquo;s still not &lt;em&gt;that&lt;/em&gt; clean when I actually call it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{{ &amp;quot;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;!-- Reading time approximation --&amp;gt;&lt;/span&gt;&amp;quot; | safeHTML }}
&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #BB4444&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;{{ .Site.BaseURL }}js/Countable.js&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt;&amp;gt;Countable.renderReadTime(&lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;div[itemprop=articleBody]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BB4444&#34;&gt;&amp;#39;.reading-time&amp;#39;&lt;/span&gt;);&amp;lt;/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll admit that my greatest weakness with front-end web development is HTML/CSS, so I&amp;rsquo;m sure I&amp;rsquo;ve made some cardinal sins here with my example code. I&amp;rsquo;ve got to do some reading up on that. But hey, that&amp;rsquo;s what this blog is for.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>starting dart</title>
      <link>http://glennryan.info/2016/02/27/starting-dart</link>
      <pubDate>Sat, 27 Feb 2016 22:31:15 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/27/starting-dart</guid>
      <description>

&lt;h3 id=&#34;preface&#34;&gt;preface()&lt;/h3&gt;

&lt;p&gt;I have a side project under wraps that I intend to work on over the next couple of months. I&amp;rsquo;m doing it for several reasons. Not only do I think the idea behind the project has potential, but I have some take-aways I hope to work towards. As a junior-level engineer, I want to have more hands-on experience with design. And, above all, as an embedded C developer, I want to modernize my toolbox and become more well-rounded as a result. I have had prior employment in the web development space, if only briefly, so I thought writing an app for the web would be great way to build off prior experience yet venture into the new.&lt;/p&gt;

&lt;p&gt;On and off since December, I&amp;rsquo;ve considered plenty of modern languages and frameworks out there to find at least one set of tools most conducive to prototyping this app &lt;em&gt;quickly&lt;/em&gt;, &lt;em&gt;efficiently&lt;/em&gt; and in a way that is &lt;em&gt;maintainable&lt;/em&gt; and &lt;em&gt;readable&lt;/em&gt; for a single full-stack developer. It would also help, I thought, if I enjoyed the langauges/frameworks I learn along the way. As someone who has only written production code for the web in Java (using JSF and Primefaces), I want this experience to be a little more modern. I want it to involve &lt;em&gt;open source&lt;/em&gt; tools.&lt;/p&gt;

&lt;h3 id=&#34;search-start&#34;&gt;search.start()&lt;/h3&gt;

&lt;p&gt;When I expressed these desires and constraints to my friend, he referred me to this video:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/pB0WvcxTbCA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;The presenter delivers a very thorough, though impartial, overview of fundamentals to nail down, taking the traditional approach of divorcing front-end from back-end. He gives his opinions on some frameworks, though through the lens of market strength more than anything. This was a very helpful start, but I needed to know what would be best for a lone, full-stack engineer.&lt;/p&gt;

&lt;p&gt;Fortunately, we can always rely on the YouTube community to spout out some ideas, right or wrong.&lt;/p&gt;

&lt;p&gt;I noticed, several comments down from the top, mention of a MEAN stack and a few replying comments praising it. This looked promising. I researched what this MEAN stack was and how it was being used. Some of the top results in my Google search revealed stunning single-page, JavaScript web apps written by a lone developer. Some of these people were generous enough to leave their repos public for others to study their code. I was instantly sold.&lt;/p&gt;

&lt;h3 id=&#34;search-redirect&#34;&gt;search.redirect()&lt;/h3&gt;

&lt;p&gt;I spent some time getting to know JavaScript and revisiting web dev fundamentals, meanwhile gathering tutorials and resources to really get started with this MEAN thing. Thanks to these venerable blog-writers, I gathered quite a bit of base material and knowledge to work with. Unfortunately, it all dematerialized once I took a step back and considered all my options once more before going &amp;ldquo;all in&amp;rdquo;, so to speak, with MEAN. I researched the negative, the neutral and the positive, ultimately becoming disenchanted with the &amp;ldquo;magic&amp;rdquo; of this combination.&lt;/p&gt;

&lt;p&gt;It all started with Angular. it became clear that though Angular 1.x is a decent-enough framework that is now very mature, it is anticipated to be usurped quite strongly by its successor Angular 2 (now in beta). Likewise, many praised, at the expense of Angular 1.x, the modular and flexible combination of React with Flux architecture. And, finally, many encouraged people to stray away from the MEAN stack in favor of something like Meteor.js.&lt;/p&gt;

&lt;p&gt;I reconsidered those options but found that they were all unsuitable for my app, being either too flexible or too narrow in design. So I decided to upgrade to Angular 2. I lost use of some directives I originally intended to use for my app, but this was fine; &lt;a href=&#34;http://angular-tips.com/blog/2015/09/migrating-directives-to-angular-2/&#34; target=&#34;_blank&#34;&gt;it&amp;rsquo;s not terrible to convert them&lt;/a&gt;. I just needed to learn the ins and outs of the new framework. And from there I fell down another rabbit hole. At my disposal in Angular 2 were three language options: JavaScript, TypeScript and Dart.&lt;/p&gt;

&lt;h3 id=&#34;search-restart&#34;&gt;search.restart()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Having an open mind is as confusing as it is enriching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I did some research into each option, weighing pros and cons. It seemed clear to me that the benefits lie almost entirely in choosing one or both of the non-JS options, since they were both so much better suited for a larger program than pure JS.&lt;/p&gt;

&lt;p&gt;Then, as I poked around some more, I started to fall for Dart &amp;mdash; I&amp;rsquo;m writing this thing from scratch, I thought, so there&amp;rsquo;s no need for TS&amp;rsquo; main selling point: compatiblity with JS. But I was not sure how realistic this choice would be. In choosing Dart, I posed three dangers to my project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A huge loss in learning materials and examples I could learn from&lt;/li&gt;
&lt;li&gt;The possibility that the language could die in a few years&lt;/li&gt;
&lt;li&gt;Potential incompatibility with key JavaScript libraries this app needs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Concerns one and two are the risks of being an early adopter, but this is cost that yields to a much greater reward: the fun and practice of developing in the unknown, not to mention the oppurtunity to potentially contribute to Angular 2 and Dart (via field-testing) and their communities (via knowledge-sharing). The third problem posed the greatest challenge to the Dart route. Thankfully, the Dart team has &lt;a href=&#34;https://www.dartlang.org/articles/js-dart-interop/&#34; target=&#34;_blank&#34;&gt;released some interoperability libraries&lt;/a&gt; to help with this very thing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“When my information changes, I alter my conclusions. What do you do, sir?”
&amp;mdash; John Maynard Keyes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, I thought, if I&amp;rsquo;m going this far, why not go further? &lt;a href=&#34;http://stackoverflow.com/questions/29218468/does-angular-2-0-alpha-work-with-the-components-in-angular-material-project&#34; target=&#34;_blank&#34;&gt;I&amp;rsquo;ve lost use of Angular Materials at this stage of Angular 2&lt;/a&gt;, so why not try Polymer too? &lt;a href=&#34;https://dart.academy/dart-angular-2-and-polymer-together/&#34; target=&#34;_blank&#34;&gt;It&amp;rsquo;s compatible with Dart and Angular 2&lt;/a&gt;. And why write the Node.js/Express backend in JS or TS if Dart with &lt;a href=&#34;https://pub.dartlang.org/packages/shelf&#34; target=&#34;_blank&#34;&gt;shelf&lt;/a&gt; can also do the job, thanks to JS interoperability? I&amp;rsquo;d rather keep the focus of using one language throughout the entirety of the app. If it&amp;rsquo;s possible, why not try it? If it&amp;rsquo;s just a prototype with no constraints, what else do I have to lose than the time I am willing to spend on it?&lt;/p&gt;

&lt;p&gt;So here I am, &lt;a href=&#34;https://www.dartlang.org/codelabs/darrrt/&#34; target=&#34;_blank&#34;&gt;getting started with Dart&lt;/a&gt;. I&amp;rsquo;ll come back in a later post and let you know how it went.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a clean slate</title>
      <link>http://glennryan.info/2016/02/27/a-clean-slate</link>
      <pubDate>Sat, 27 Feb 2016 14:08:44 -0800</pubDate>
      
      <guid>http://glennryan.info/2016/02/27/a-clean-slate</guid>
      <description>

&lt;h3 id=&#34;start&#34;&gt;start()&lt;/h3&gt;

&lt;p&gt;As my first order of business, I was looking to to delete all prior tweets from my account, since I plan to start using Twitter in a more professional capacity from now on. To do so, I see there are &lt;a href=&#34;tweetdelete.net&#34; target=&#34;_blank&#34;&gt;various sites&lt;/a&gt; and &lt;a href=&#34;https://www.gocardigan.com/&#34; target=&#34;_blank&#34;&gt;services&lt;/a&gt; out there to assist with that. But part of beginning this blog was a commitment to exploring how I can use official  APIs, third-party libraries or my own code from scratch to accomplish things on the web.&lt;/p&gt;

&lt;p&gt;So I found this nice Python script, courtesy of &lt;a href=&#34;https://github.com/davej&#34; target=&#34;_blank&#34;&gt;Dave Jeffery&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/davej/113241.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I registered my twitter application under bird_eater (ha, get it? because it&amp;rsquo;s Python getting rid of tweets&amp;hellip; eh) and put in my key and secret. I then followed the directions from the script&amp;rsquo;s output et voilà! I am now tweet-free. I can restart my Twitter profile with a clean slate &amp;mdash; notwithstanding the other parts of my account.&lt;/p&gt;

&lt;h3 id=&#34;continue&#34;&gt;continue&lt;/h3&gt;

&lt;p&gt;In fact, why not take care of those things, too? To take this further, I should expand on this script to make it a bit more sophisticated. Some ideas could be deleting certain tweets, unfollowing accounts, removing likes and lists, etc. That could be a promising project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>